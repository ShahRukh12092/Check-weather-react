{"version":3,"sources":["components/Card.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Card","winfo","useState","icon","seticon","temp","current","humidity","pressure","country","sunrise","sunset","name","seconds","date","Date","time","getHours","getMinutes","time1","useEffect","className","class","style","color","Weather","searchValue","setvalue","setWvalue","getWeatherInfo","a","console","log","url","fetch","res","json","data","sys","main","weather","alert","type","placeholder","autofocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ddc1859.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./weather.css\";\r\nconst Card = ({ winfo }) => {\r\n  const [icon, seticon] = useState(\"\");\r\n\r\n  const { temp, current, humidity, pressure, country, sunrise, sunset, name } =\r\n    winfo;\r\n\r\n  const countryStyle = {\r\n    color: \"#fff\",\r\n  };\r\n  let seconds = sunrise;\r\n  let date = new Date(seconds * 1000);\r\n  let time = `${date.getHours()}:${date.getMinutes()} AM`;\r\n\r\n  seconds = sunset;\r\n  date = new Date(seconds * 1000);\r\n  let time1 = `${date.getHours()}:${date.getMinutes()} PM`;\r\n\r\n  useEffect(() => {\r\n    if (current) {\r\n      switch (current) {\r\n        case \"Clouds\":\r\n          seticon(\"wi-day-cloudy\");\r\n          break;\r\n        case \"Haze\":\r\n          seticon(\"wi-day-haze\");\r\n          break;\r\n        case \"Clear\":\r\n          seticon(\"wi-day-sunny\");\r\n          break;\r\n        case \"Wind\":\r\n          seticon(\"wi-day-windy\");\r\n          break;\r\n        case \"Snow\":\r\n          seticon(\"wi-day-snow\");\r\n          break;\r\n        case \"Rain\":\r\n          seticon(\"wi-day-rain\");\r\n          break;\r\n        case \"Lightning\":\r\n          seticon(\"wi-day-lightning\");\r\n          break;\r\n        default:\r\n          seticon(\"wi-day-sunny\");\r\n      }\r\n    }\r\n  }, [current]);\r\n  return (\r\n    <>\r\n      <div className=\"wrap1\">\r\n        <div className=\"info\">\r\n          <div className=\"icon\">\r\n            <div class=\"image\">\r\n              <i className={`wi ${icon}`}></i>\r\n            </div>\r\n          </div>\r\n          <div className=\"row1\">\r\n            <div className=\"temp\">\r\n              <span className=\"col\">{temp}&deg;</span> Temperature\r\n            </div>\r\n            <div className=\"countryinfo\">\r\n              <h2 style={countryStyle}>{current}</h2>\r\n              <span>\r\n                <h4 className=\"city\">{name}</h4>\r\n                <h4 className=\"cont\">{country}</h4>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"row2\">\r\n            <div className=\"humd\">\r\n              <span className=\"col\">{humidity}</span> Humidity\r\n            </div>\r\n            <div className=\"pres\">\r\n              <span className=\"col\"> {pressure} MM</span> Pressure\r\n            </div>\r\n          </div>\r\n          <div className=\"row3\">\r\n            <div className=\"humd\">\r\n              <span className=\"col\"> {time}</span>SunRise\r\n            </div>\r\n            <div className=\"pres\">\r\n              <span className=\"col\"> {time1}</span> SunSet\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./weather.css\";\r\n\r\nconst Weather = () => {\r\n  const [searchValue, setvalue] = useState(\"Mianwali\");\r\n  const [winfo, setWvalue] = useState({});\r\n\r\n  const getWeatherInfo = async () => {\r\n    try {\r\n      console.log(searchValue);\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=ea3f915a00755b8723529749798b9af4`;\r\n      let res = await fetch(url);\r\n      const data = await res.json();\r\n      console.log(data);\r\n      const { name } = data;\r\n      const { country, sunrise, sunset } = data.sys;\r\n      const { temp, humidity, pressure } = data.main;\r\n      const { main: current } = data.weather[0];\r\n      const info = {\r\n        temp,\r\n        current,\r\n        humidity,\r\n        pressure,\r\n        country,\r\n        sunrise,\r\n        sunset,\r\n        name,\r\n      };\r\n      setWvalue(info);\r\n      console.log(winfo);\r\n    } catch (error) {\r\n      alert(error);\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"wrap\">\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"city name\"\r\n            autofocus\r\n            id=\"search\"\r\n            class=\"searchitem\"\r\n            value={searchValue}\r\n            onChange={(e) => {\r\n              setvalue(e.target.value);\r\n            }}\r\n          />\r\n          <button type=\"button\" onClick={getWeatherInfo}>\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Card winfo={winfo} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import \"./App.css\";\nimport Weather from \"./components/Weather\";\nfunction App() {\n  return (\n    <div>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}